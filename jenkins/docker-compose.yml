version: '3.7'

services:
  mysql:
    image: mysql:8.0.37
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - theramzee-mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --default-authentication-plugin=mysql_native_password
    networks:
      - theramzee-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    command: redis-server --bind 0.0.0.0
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - theramzee-redis-data:/data
    restart: unless-stopped
    networks:
      - theramzee-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  backend:
    build: ./backend
    image: ${BACKEND_IMAGE}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 5s
        order: stop-first
    env_file:
      - .env
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    networks:
      - theramzee-network

  frontend:
    build: ./frontend
    image: ${FRONTEND_IMAGE}
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - theramzee-network

  nginx:
    build: ./nginx
    image: ${NGINX_IMAGE}
    deploy:
      mode: global
      update_config:
        parallelism: 1
        delay: 15s
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - theramzee-network

volumes:
  theramzee-mysql-data:
  theramzee-redis-data:

networks:
  theramzee-network:
    driver: overlay