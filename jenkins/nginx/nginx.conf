pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 요청 제한 설정
    limit_req_zone $binary_remote_addr zone=bot_limiter:10m rate=10r/s;

    upstream backend {
        server theramzee-backend-1:8080;
    }

    upstream frontend {
        server theramzee-frontend-1:80;
    }

    # 로깅 설정 추가
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log main;
    error_log   /var/log/nginx/error.log warn;

    server {
        listen 80;
        server_name ramzee.online i12b204.p.ssafy.io;
        return 301 https://ramzee.online$request_uri;
    }

    # HTTPS 서버 설정
    server {
        listen 443 ssl;
        server_name ramzee.online;

        # SSL 인증서 설정
        ssl_certificate /etc/letsencrypt/live/ramzee.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/ramzee.online/privkey.pem;

        # 개선된 SSL 프로토콜 및 암호화 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;

        # 보안 헤더 강화
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        #add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'; frame-src 'self'; object-src 'none';" always;
        add_header Content-Security-Policy "default-src 'self' https: wss:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: https:;" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header Permissions-Policy "geolocation=(), midi=(), camera=(), microphone=()" always;

        # 악성 봇 차단
        if ($http_user_agent ~* "(curl|wget|python|scrapy|java|bot|crawler|spider|MJ12bot|AhrefsBot|SemrushBot|Baiduspider|DotBot|BLEXBot|HTTrack)") {
            return 403;
        }

        # 압축 설정
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Swagger UI 경로를 백엔드로 프록시 (prefix match)
        location /swagger-ui/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 추가: api-docs 경로를 백엔드로 프록시
        location /api-docs/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # API 프록시
        location /api/ {
            limit_req zone=bot_limiter burst=20 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;

            # CORS 설정
            add_header 'Access-Control-Allow-Origin' 'https://ramzee.online' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # 프론트엔드 프록시
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # OpenVidu 프록시
        location /openvidu/ {
            proxy_pass https://ramzee.online:8443/;
            proxy_ssl_verify on;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /ws/ {
            proxy_pass http://backend/ws/;  # 끝에 슬래시(/) 추가
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            # 연결 유지 시간 설정
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_buffering off;
        }

        # 정적 파일 캐싱
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public";
            access_log off;
        }

        # robots.txt 차단 규칙
        #location = /robots.txt {
        #    add_header Content-Type text/plain;
        #    return 200 "User-agent: *\nDisallow: /";
        #}
    }
}
